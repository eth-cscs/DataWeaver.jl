var documenterSearchIndex = {"docs":
[{"location":"api/","page":"API reference","title":"API reference","text":"CurrentModule = DataWeaver","category":"page"},{"location":"api/#API-reference","page":"API reference","title":"API reference","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"This is the official API reference of DataWeaver. Note that it can also be queried interactively from the Julia REPL using the help mode:","category":"page"},{"location":"api/","page":"API reference","title":"API reference","text":"julia> using DataWeaver\njulia>?\nhelp?> DataWeaver","category":"page"},{"location":"api/#[CellArray](@ref)-type-and-basic-constructors","page":"API reference","title":"CellArray type and basic constructors","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"CellArray","category":"page"},{"location":"api/#Convenience-type-aliases-and-constructors","page":"API reference","title":"Convenience type aliases and constructors","text":"","category":"section"},{"location":"api/#Index","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"DataWeaver.CPUCellArray\nDataWeaver.CuCellArray\nDataWeaver.ROCCellArray","category":"page"},{"location":"api/#Documentation","page":"API reference","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [DataWeaver]\nOrder   = [:type]\nFilter = t -> typeof(t) !== CellArray","category":"page"},{"location":"api/#Functions-–-additional-to-standard-AbstractArray-functionality","page":"API reference","title":"Functions – additional to standard AbstractArray functionality","text":"","category":"section"},{"location":"api/#Index-2","page":"API reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Order = [:function]","category":"page"},{"location":"api/#Documentation-2","page":"API reference","title":"Documentation","text":"","category":"section"},{"location":"api/","page":"API reference","title":"API reference","text":"Modules = [DataWeaver]\nOrder   = [:function]","category":"page"},{"location":"api/#DataWeaver.adios2_config","page":"API reference","title":"DataWeaver.adios2_config","text":"If the ADIOS2 config file is not provided, this function uses the XML template to create the file automatically with parameters provided by the user. Returns the XML path to the new file.\n\n\n\n\n\n","category":"function"},{"location":"api/#DataWeaver.adios2_init-Tuple{}","page":"API reference","title":"DataWeaver.adios2_init","text":"Intialize ADIOS2. Supports several configuration options: MPI, serial, existing XML config file or a new file with specified parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataWeaver.finalize_adios-Tuple{}","page":"API reference","title":"DataWeaver.finalize_adios","text":"Close the ADIOS2 engine once all steps have been performed.\n\n\n\n\n\n","category":"method"},{"location":"api/#DataWeaver.read_setup","page":"API reference","title":"DataWeaver.read_setup","text":"Initialize io in read mode and the corresponding engine for reading data.\n\n\n\n\n\n","category":"function"},{"location":"api/#DataWeaver.write","page":"API reference","title":"DataWeaver.write","text":"Perform the update using specified variables.\n\n\n\n\n\n","category":"function"},{"location":"api/#DataWeaver.write_setup-Tuple","page":"API reference","title":"DataWeaver.write_setup","text":"Initialize io in write mode and the corresponding engine for writing data.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Have a look at the Examples and see the API reference for details on the usage of DataWeaver.","category":"page"},{"location":"usage/#Installation","page":"Usage","title":"Installation","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"DataWeaver can be installed directly with the Julia package manager from the Julia REPL:","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"julia>]\n  pkg> add DataWeaver","category":"page"},{"location":"examples/#Examples","page":"...","title":"Examples","text":"","category":"section"},{"location":"examples/","page":"...","title":"...","text":"Pages = [\"examples/memcopyCellArray3D.md\"]","category":"page"},{"location":"examples/","page":"...","title":"...","text":"Pages = [\"examples/memcopyCellArray3D_ParallelStencil.md\"]","category":"page"},{"location":"examples/memcopyCellArray3D_ParallelStencil/#Memory-copy-of-[CellArray](@ref)s-with-4x4-cells-using-[ParallelStencil.jl]","page":"Memory copy of CellArrays with 4x4 cells using [ParallelStencil.jl]","title":"Memory copy of CellArrays with 4x4 cells using [ParallelStencil.jl]","text":"","category":"section"},{"location":"examples/memcopyCellArray3D_ParallelStencil/","page":"Memory copy of CellArrays with 4x4 cells using [ParallelStencil.jl]","title":"Memory copy of CellArrays with 4x4 cells using [ParallelStencil.jl]","text":"Main.mdinclude(joinpath(Main.EXAMPLEROOT, \"memcopyCellArray3D_ParallelStencil.jl\"))","category":"page"},{"location":"examples/memcopyCellArray3D_ParallelStencil/","page":"Memory copy of CellArrays with 4x4 cells using [ParallelStencil.jl]","title":"Memory copy of CellArrays with 4x4 cells using [ParallelStencil.jl]","text":"The corresponding file can be found here.","category":"page"},{"location":"examples/memcopyCellArray3D/#Memory-copy-of-[CuCellArray](@ref)s-with-4x4-SMatrix-cells","page":"Memory copy of CuCellArrays with 4x4 SMatrix cells","title":"Memory copy of CuCellArrays with 4x4 SMatrix cells","text":"","category":"section"},{"location":"examples/memcopyCellArray3D/","page":"Memory copy of CuCellArrays with 4x4 SMatrix cells","title":"Memory copy of CuCellArrays with 4x4 SMatrix cells","text":"Main.mdinclude(joinpath(Main.EXAMPLEROOT, \"memcopyCellArray3D.jl\"))","category":"page"},{"location":"examples/memcopyCellArray3D/","page":"Memory copy of CuCellArrays with 4x4 SMatrix cells","title":"Memory copy of CuCellArrays with 4x4 SMatrix cells","text":"The corresponding file can be found here.","category":"page"},{"location":"#[DataWeaver.jl](https://github.com/eth-cscs/DataWeaver.jl)-[![Star-on-GitHub](https://img.shields.io/github/stars/eth-cscs/DataWeaver.jl.svg)](https://github.com/eth-cscs/DataWeaver.jl/stargazers)","page":"Introduction","title":"DataWeaver.jl (Image: Star on GitHub)","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The package DataWeaver provides...","category":"page"},{"location":"#Dependencies","page":"Introduction","title":"Dependencies","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"DataWeaver relies on ADIOS2.jl.","category":"page"},{"location":"#Contributors","page":"Introduction","title":"Contributors","text":"","category":"section"},{"location":"","page":"Introduction","title":"Introduction","text":"The principal contributors to DataWeaver.jl are (ordered by the significance of the relative contributions):","category":"page"},{"location":"","page":"Introduction","title":"Introduction","text":"Maja Gwozdz, (@mkg33), ETH Zurich\nDr. Samuel Omlin (@omlins), CSCS - Swiss National Supercomputing Centre, ETH Zurich","category":"page"}]
}
